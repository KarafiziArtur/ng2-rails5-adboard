{"version":3,"file":"app.bundle.js","sources":["webpack:///src/app.ts","webpack:///src/app/seed-app.ts","webpack:///src/app/components/home/home.ts","webpack:///src/app/services/adverts.ts","webpack:///./~/rxjs/add/operator/map.js","webpack:///./~/rxjs/operator/map.js","webpack:///src/app/components/advert/advert.ts","webpack:///src/app/services/advert.ts","webpack:///src/app/components/advert/advert.add.ts","webpack:///src/app/components/home/last.advert.ts","webpack:///src/app/services/user.ts"],"sourcesContent":["import {LocationStrategy, HashLocationStrategy} from '@angular/common';\r\nimport {bootstrap} from '@angular/platform-browser-dynamic';\r\nimport {provide, enableProdMode} from '@angular/core';\r\nimport {HTTP_PROVIDERS} from '@angular/http';\r\nimport {ROUTER_PROVIDERS} from '@angular/router-deprecated';\r\nimport {provideStore} from '@ngrx/store';\r\n\r\nimport {SeedApp} from './app/seed-app';\r\n\r\n\r\n// enableProdMode()\r\n\r\nbootstrap(SeedApp, [\r\n  HTTP_PROVIDERS,\r\n  ROUTER_PROVIDERS,\r\n  provide(LocationStrategy, {useClass: HashLocationStrategy})\r\n])\r\n.catch(err => console.error(err));\n\n\n/** WEBPACK FOOTER **\n ** src/app.ts\n **/","import {Component} from '@angular/core';\r\nimport {Location} from '@angular/common';\r\nimport {Router, RouteConfig, ROUTER_DIRECTIVES} from '@angular/router-deprecated';\r\n\r\nimport { Home } from './components/home/home';\r\n\r\nimport { UserService } from './services/user';\r\n\r\n@Component({\r\n  selector: 'app',\r\n  providers: [UserService, Location],\r\n  pipes: [],\r\n  directives: [ROUTER_DIRECTIVES],\r\n  templateUrl: 'app/seed-app.html',\r\n})\r\n@RouteConfig([\r\n  { path: '/', component: Home, name: 'Home', useAsDefault: true },\r\n])\r\nexport class SeedApp {\r\n  constructor(private userService: UserService) {}\r\n\r\n  userInfo: any;\r\n\r\n  getUserInfo() {\r\n    this.userService.getUserInfo()\r\n        .subscribe(\r\n            data => this.userInfo = data,\r\n            error => console.log(\"Error getting User Info\", error),\r\n            () => console.log(\"Complete getting User Info!\")\r\n        );\r\n  }\r\n  \r\n  ngOnInit(){\r\n    this.getUserInfo();\r\n  }\r\n\r\n  signOut() {\r\n    this.userService.signOut()\r\n        .subscribe(\r\n            data => data,\r\n            error => console.log(\"Error Sign Out\", error),\r\n            () => {\r\n              console.log(\"Complete Sign Out!\");\r\n              this.userInfo = null;\r\n            }\r\n        );\r\n  }\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/app/seed-app.ts\n **/","import { Component } from '@angular/core';\r\nimport { ROUTER_DIRECTIVES } from '@angular/router-deprecated';\r\nimport { AdvertsService } from '../../services/adverts';\r\nimport { Advert } from '../advert/advert';\r\nimport { AdvertAdd } from '../advert/advert.add';\r\nimport { LastAdvertDirective } from './last.advert.ts'\r\nimport { UserService } from '../../services/user'\r\n\r\n\r\n@Component({\r\n  selector: 'home',\r\n  templateUrl: '/app/components/home/home.html',\r\n  styleUrls: ['/app/components/home/home.css'],\r\n  providers: [ AdvertsService, UserService ],\r\n  directives: [ ROUTER_DIRECTIVES, Advert, LastAdvertDirective, AdvertAdd ],\r\n  pipes: []\r\n})\r\nexport class Home {\r\n\r\n  adverts: any = [];\r\n  id: number;\r\n  action: string;\r\n  userInfo: any;\r\n\r\n  constructor(private httpService: AdvertsService, private userService: UserService) {}\r\n\r\n  getAdverts() {\r\n    this.httpService.getAdverts()\r\n        .subscribe(\r\n            data => this.adverts = data,\r\n            error => console.log(\"Error getting Adverts\", error),\r\n            () => {\r\n              console.log(\"Complete getting Adverts!\");\r\n            }\r\n        );\r\n  }\r\n\r\n  getUserInfo() {\r\n    this.userService.getUserInfo()\r\n        .subscribe(\r\n            data => this.userInfo = data,\r\n            error => console.log(\"Error getting User Info\", error)\r\n        );\r\n  }\r\n  \r\n  ngOnInit() {\r\n    this.getUserInfo();\r\n    this.getAdverts();\r\n  }\r\n  \r\n  initModal() {\r\n    let jQuery = window['$'];\r\n    jQuery('.modal-trigger').leanModal();\r\n    console.log('Initialize complete!');\r\n  }\r\n\r\n  deleteAdvert(advert: any) {\r\n    let advertIndex: number = this.adverts.indexOf(advert);\r\n    return this.httpService.deleteAdvert(advert.id)\r\n        .subscribe(\r\n            data => console.log(data),\r\n            error => console.log(\"Error deleting Advert\", error),\r\n            () => {\r\n              console.log(\"Complete deleting Advert!\");\r\n              return this.adverts.splice(advertIndex, 1);\r\n            }\r\n        );\r\n  }\r\n\r\n  openAdvert(advertId: number, action: string = 'view') {\r\n    this.action = action;\r\n    this.id = advertId;\r\n  }\r\n\r\n  updateAdvert(advert: any) {\r\n    let advertFromId = this.adverts.filter((ad) => {\r\n      return ad.id === advert.id;\r\n    });\r\n    let advertIndex = this.adverts.indexOf(advertFromId[0]);\r\n    this.adverts[advertIndex] = advert;\r\n  }\r\n  \r\n  addAdvert(advert: any) {\r\n    this.adverts.push(advert);\r\n  }\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/app/components/home/home.ts\n **/","import { Injectable } from '@angular/core';\r\nimport { Http, Headers, RequestOptions, Request, RequestMethod } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class AdvertsService {\r\n  constructor(private http: Http) {}\r\n\r\n  BASE_URL = 'http://localhost:3000/';\r\n\r\n  getAdverts() {\r\n    return this.http.get(this.BASE_URL + 'adverts.json')\r\n        .map((res) => res.json());\r\n  }\r\n\r\n  getAdvert(id: number) {\r\n    return this.http.get(this.BASE_URL + `adverts/${ id }.json`)\r\n        .map((res) => res.json());\r\n  }\r\n\r\n  deleteAdvert(id: any) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.delete(this.BASE_URL + `adverts/${ id }.json`, {headers: headers})\r\n        .map((res) => res);\r\n  }\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** src/app/services/adverts.ts\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/operator/map.js\n ** module id = 336\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    if (typeof project !== 'function') {\n        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return this.lift(new MapOperator(project, thisArg));\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/operator/map.js\n ** module id = 337\n ** module chunks = 0\n **/","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport {RouteParams, ROUTER_DIRECTIVES} from '@angular/router-deprecated';\r\nimport { AdvertService } from '../../services/advert';\r\n\r\n@Component({\r\n  selector: 'advert',\r\n  templateUrl: `/app/components/advert/advert.html`,\r\n  styleUrls: ['/app/components/advert/advert.css'],\r\n  providers: [AdvertService],\r\n  directives: [ ROUTER_DIRECTIVES ],\r\n  pipes: []\r\n})\r\nexport class Advert {\r\n\r\n  advert = {};\r\n  @Input() action: string;\r\n  @Input() id: number;\r\n  @Output() onSaveAdvert: EventEmitter<any> = new EventEmitter<any>();\r\n  \r\n  constructor(public routeParams: RouteParams, private httpService: AdvertService) {}\r\n\r\n  ngOnChanges() {\r\n    if (this.id) {\r\n      let Materialize = window['Materialize'];\r\n      this.getAdvert();\r\n      setTimeout(function () {\r\n        Materialize.updateTextFields();\r\n        console.log('Materialize updated');\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  getAdvert() {\r\n    let id = +this.id;\r\n    this.httpService.getAdvert(id)\r\n        .subscribe(\r\n            data => this.advert = data,\r\n            error => console.log(\"Error getting Advert\", error),\r\n            () => console.log(\"Complete getting Advert!\")\r\n        );\r\n  }\r\n  \r\n  saveAdvert() {\r\n    this.httpService.saveAdvert(this.advert)\r\n        .subscribe(\r\n            data => {\r\n              this.onSaveAdvert.emit(data.json());\r\n              console.log('data', data);\r\n            },\r\n            error => console.log(\"Error updating Advert\", error),\r\n            () => console.log(\"Complete updating Advert!\")\r\n        );\r\n  }\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/app/components/advert/advert.ts\n **/","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class AdvertService {\r\n  constructor(private http: Http) {}\r\n\r\n  BASE_URL = 'http://localhost:3000/';\r\n\r\n  getAdvert(id: number) {\r\n    return this.http.get(this.BASE_URL + `adverts/${ id }.json`)\r\n        .map((res) => res.json());\r\n  }\r\n\r\n  saveAdvert(advert: any) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.put(this.BASE_URL + `adverts/${ advert.id }.json`, JSON.stringify(advert), {headers: headers});\r\n  }\r\n\r\n  addAdvert(advert: any) {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.post(this.BASE_URL + `adverts`, JSON.stringify(advert), {headers: headers});\r\n  }\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** src/app/services/advert.ts\n **/","import { Component, Output, EventEmitter } from '@angular/core';\r\nimport {RouteParams, ROUTER_DIRECTIVES} from '@angular/router-deprecated';\r\nimport { AdvertService } from '../../services/advert';\r\n\r\n@Component({\r\n  selector: 'advert-add',\r\n  templateUrl: `/app/components/advert/advert.add.html`,\r\n  styleUrls: ['/app/components/advert/advert.css'],\r\n  providers: [AdvertService],\r\n  directives: [ ROUTER_DIRECTIVES ],\r\n  pipes: []\r\n})\r\nexport class AdvertAdd {\r\n\r\n  advert = {};\r\n  @Output() onAddAdvert: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(public routeParams: RouteParams, private httpService: AdvertService) {}\r\n\r\n  addAdvert() {\r\n    let jQuery = window['$'];\r\n    this.httpService.addAdvert(this.advert)\r\n        .subscribe(\r\n            data => {\r\n              this.onAddAdvert.emit(data.json());\r\n              jQuery('#addAdvert').closeModal();\r\n              console.log('data', data);\r\n            },\r\n            error => console.log(\"Error adding Advert\", error),\r\n            () => {\r\n              console.log(\"Complete adding Advert!\");\r\n            }\r\n        );\r\n  }\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/app/components/advert/advert.add.ts\n **/","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: '[isLast]',\r\n  template: ``,\r\n})\r\nexport class LastAdvertDirective{\r\n  @Input() isLast: boolean;\r\n  @Output() lastDone: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  ngOnInit() {\r\n    if(this.isLast) {\r\n      this.lastDone.emit(true);\r\n    }\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/app/components/home/last.advert.ts\n **/","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(private http: Http) {}\r\n\r\n  BASE_URL = 'http://localhost:3000/';\r\n  \r\n  userInfo: any;\r\n\r\n  ngOnInit() {\r\n    this.getUserInfo();\r\n  }\r\n  \r\n  getUserInfo() {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.get(this.BASE_URL + `users/edit.json`, {headers: headers})\r\n        .map((res) => res.json());\r\n  }\r\n  \r\n  signOut() {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    return this.http.delete(this.BASE_URL + `users/sign_out`, {headers: headers})\r\n        .map((res) => res);\r\n  }\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** src/app/services/user.ts\n **/"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AAEA;AAEA;AAYA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAtCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA+BA;AAAA;AA9BA;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAOA;AAAA;AAAA;AALA;AAKA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA3EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsEA;AAAA;AArEA;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;;AAAA;AAuBA;AAAA;AAtBA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AAUA;AAOA;AAAA;AAAA;AALA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAIA;AArCA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA2CA;AAAA;AA1CA;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AArBA;AAAA;;AAAA;AAuBA;AAAA;AAtBA;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAUA;AAKA;AAAA;AAAA;AAHA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAlBA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwBA;AAAA;AAvBA;;;;;;;;;;;;;;;;;;ACZA;AAMA;AAAA;AAEA;AAMA;AALA;AACA;AACA;AACA;AACA;AANA;AAAA;;AAAA;AACA;AAAA;;AAAA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AASA;AAAA;AARA;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAFA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;AAAA;AA0BA;AAAA;AAzBA;;;;;","sourceRoot":""}